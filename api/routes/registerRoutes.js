/**
 *  @POST
 *  for save new account to mongoDB 
 *  reset everything at 3.00 am
 *  completed
 * 
 *
 *  body required
 *     line_id: string
 *     mom_age: string
 *     ges_age_week: number
 *   
 * 
 *  Created by CPU on 7/8/19
 */

const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const line = require('@line/bot-sdk');
const cron = require('node-cron');

const dataCollection = require('../models/dataModel');

router.post("/", (req, res, next) => {

    var lineId = req.body.line_id;

    //check input 
    if (lineId == null || lineId == "") {
        res.json({
            status: 'error',
            message: 'please enter line id'
        });
        return null;
    }

    var userData = new dataCollection({
        _id: new mongoose.Types.ObjectId(),
        line_id: req.body.line_id,
        mom_age: req.body.mom_age,
        ges_age_week: req.body.ges_age_week,
        week_current: 0,
        timer_status: 'timeout',
        sdk_status: 'enable',
        extra: 'disable',
        count_type: 'any',
    });

    //check if account is exists
    dataCollection.find({ line_id: req.body.line_id })
        .exec()
        .then(docs => {
            if (docs == "") {
                console.log('this line id does not exist');

                userData.save()
                    .then(result => {
                        console.log(result);

                        pushMessage('register');
                        resetAutomatic();

                        res.status(201).json({
                            user: result
                        });
                    })
                    .catch(err => {
                        console.log(err);
                        res.status(500).json({
                            error: err
                        });
                    });
            }
            else {
                res.json({
                    status: '0000',
                    message: 'this line id already exists'
                });
            }
        }).catch(err => {
            console.log(err)
            res.json({
                message: 'line id not found.',
            });
        });


    function resetAutomatic() {
        cron.schedule('0 3 * * *', () => {  // 0 14
            console.log('resetAutimatic id ' + req.body.line_id);

            dataCollection.findOne({ line_id: req.body.line_id })
                .exec()
                .then(docs => {

                    var countingLength = docs.counting.length;

                    if (countingLength > 0) {
                        var _did = docs.counting[countingLength - 1]._did;
                        if (docs.count_type == 'ctt' && docs.timer_status == 'running') {
                            if (docs.counting[countingLength - 1].ctt_amount >= 10) {
                                pushMessage('ctt_good');
                                dataCollection.updateOne({ line_id: req.body.line_id, 'counting._did': _did }, {
                                    $set: {
                                        timer_status: "timeout",
                                        sdk_status: 'enable',
                                        extra: 'disable',
                                        count_type: 'any',
                                        'counting.$.status': 'close',
                                        'counting.$.result': 'р╕ер╕╣р╕Бр╕Фр╕┤р╣Йр╕Щр╕Фр╕╡'
                                    }
                                }, function (err, docs) {
                                    console.log(err);
                                });
                                console.log('reset successful : ctt : good result')
                            }
                            else {
                                pushMessage('ctt_bad');
                                dataCollection.updateOne({ line_id: req.body.line_id, 'counting._did': _did }, {
                                    $set: {
                                        timer_status: "timeout",
                                        sdk_status: 'enable',
                                        extra: 'disable',
                                        count_type: 'any',
                                        'counting.$.status': 'close',
                                        'counting.$.result': 'р╕бр╕╡р╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З'
                                    }
                                }, function (err, docs) {
                                    console.log(err);
                                });
                                console.log('reset successful : ctt : bad result')
                            }
                        }
                        else if (docs.count_type == 'sdk') {
                            dataCollection.updateOne({ line_id: req.body.line_id, 'counting._did': _did }, {
                                $set: {
                                    timer_status: "timeout",
                                    sdk_status: 'enable',
                                    extra: 'disable',
                                    count_type: 'any',
                                    'counting.$.status': 'close'
                                }
                            }, function (err, docs) {
                                console.log(err);
                            });
                            console.log('reset successful : sdk')
                        }

                    }
                    else {
                        dataCollection.updateOne({ line_id: req.body.line_id }, {
                            $set: {
                                timer_status: "timeout",
                                sdk_status: 'enable',
                                extra: 'disable',
                                count_type: 'any'
                            }
                        }, function (err, docs) {
                            console.log(err);
                        });
                        console.log('reset successful')
                    }

                })
                .catch(err => {
                    console.log(err);
                });
        }, {
                scheduled: true,
                timezone: "Asia/Bangkok"
            });
    }

    function pushMessage(state) {
        if (state == 'register') {
            / push messsage to line */
            const client = new line.Client({
                channelAccessToken: 'SCtu4U76N1oEXS3Ahq1EX9nBNkrtbKGdn8so1vbUZaBIXfTlxGqMldJ3Ego3GscxKGUB7MlfR3DHtTbg6hrYPGU9reSTBcCSiChuKmDCMx4FTtIPXzivaYUi3I6Yk1u/yF5k85Le0IUFrkBNxaETxFGUYhWQfeY8sLGRXgo3xvw='
            });
            const message = [
                {
                    type: 'text',
                    text: 'р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╣Ир╕░р╕Др╕╕р╕Ур╣Бр╕бр╣И \nр╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕ер╕╣р╕Бр╕Щр╣Йр╕нр╕вр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕бр╕╡р╕нр╕▓р╕вр╕╕ ' + req.body.ges_age_week + ' р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М'
                },
                {
                    type: 'text',
                    text: 'р╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕нр╣Ир╕▓р╕Щр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╣Др╕Хр╕гр╕бр╕▓р╕к р╣Др╕Фр╣Йр╕Фр╕▒р╕Зр╕Щр╕╡р╣Й'
                },
                {
                    type: 'text',
                    text: 'ЁЯМЯр╣Др╕Хр╕гр╕бр╕▓р╕кр╕Чр╕╡р╣И 1 (1-12 р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М) \nр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕Ир╕░р╕Хр╣Йр╕нр╕Зр╣Гр╕лр╣Йр╕Др╕зр╕▓р╕бр╕кр╕│р╕Др╕▒р╕Н р╕Др╕╖р╕н \n\tЁЯУНр╣Вр╕ар╕Кр╕Щр╕▓р╕Бр╕▓р╕г \n\tЁЯУНр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в \n\tЁЯУНр╣Ар╕Юр╕ир╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Вр╕Ур╕░р╕Хр╕▒р╣Йр╕Зр╕Др╕гр╕гр╕ар╣М \n\tЁЯУНр╕кр╕▒р╕Нр╕Нр╕▓р╕Ур╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в \n\nЁЯМЯр╣Др╕Хр╕гр╕бр╕▓р╕кр╕Чр╕╡р╣И 2 (12-24 р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М) \nр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕Ир╕░р╕Хр╣Йр╕нр╕Зр╣Гр╕лр╣Йр╕Др╕зр╕▓р╕бр╕кр╕│р╕Др╕▒р╕Нр╕Др╕╖р╕н \n\tЁЯУНр╣Вр╕ар╕Кр╕Щр╕▓р╕Бр╕▓р╕г \n\tЁЯУНр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в \n\tЁЯУНр╕Бр╕▓р╕гр╕Щр╕нр╕Щр╕лр╕ер╕▒р╕Ър╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щ \n\tЁЯУНр╣Ар╕Юр╕ир╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Вр╕Ур╕░р╕Хр╕▒р╣Йр╕Зр╕Др╕гр╕гр╕ар╣М \n\tЁЯУНр╕кр╕▒р╕Нр╕Нр╕▓р╕Ур╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в \n\nЁЯМЯр╣Др╕Хр╕гр╕бр╕▓р╕кр╕Чр╕╡р╣И 3 (24 р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Вр╕╢р╣Йр╕Щр╣Др╕Ы) \nр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕Ир╕░р╕Хр╣Йр╕нр╕Зр╣Гр╕лр╣Йр╕Др╕зр╕▓р╕бр╕кр╕│р╕Др╕▒р╕Нр╕Др╕╖р╕н \n\tЁЯУНр╣Вр╕ар╕Кр╕Щр╕▓р╕Бр╕▓р╕г \n\tЁЯУНр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в \n\tЁЯУНр╕Бр╕▓р╕гр╕Щр╕▒р╕Ър╕ер╕╣р╕Бр╕Фр╕┤р╣Йр╕Щ \n\tЁЯУНр╕Бр╕▓р╕гр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Хр╕▒р╕зр╕Др╕ер╕нр╕Ф '
                },
                // {
                //     type: "sticker",
                //     packageId: 3,
                //     stickerId: 247
                // }
            ];
            client.pushMessage(req.body.line_id, message)
                .then(() => {
                    console.log('push message done!')
                })
                .catch((err) => {
                    console.log(err);
                });
        }

        else if (state == 'ctt_good') {
            / push message to line */
            const client = new line.Client({
                channelAccessToken: 'SCtu4U76N1oEXS3Ahq1EX9nBNkrtbKGdn8so1vbUZaBIXfTlxGqMldJ3Ego3GscxKGUB7MlfR3DHtTbg6hrYPGU9reSTBcCSiChuKmDCMx4FTtIPXzivaYUi3I6Yk1u/yF5k85Le0IUFrkBNxaETxFGUYhWQfeY8sLGRXgo3xvw='
            });
            const message = [
                {
                    type: 'text',
                    text: 'ЁЯСНр╣Ар╕вр╕╡р╣Ир╕вр╕бр╕бр╕▓р╕Бр╕Др╣Ир╕░р╕Др╕╕р╕Ур╣Бр╕бр╣И р╕ер╕╣р╕Бр╕Фр╕┤р╣Йр╕Щр╕Фр╕╡ ЁЯС╢ЁЯП╗ЁЯШБ'
                },
                {
                    type: 'text',
                    text: 'р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕Щр╕▒р╕Ър╕ер╕╣р╕Бр╕Фр╕┤р╣Йр╕Щр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з р╕Бр╕ер╕▒р╕Ър╕бр╕▓р╕Щр╕▒р╕Ър╣Гр╕лр╕бр╣Ир╕Юр╕гр╕╕р╣Ир╕Зр╕Щр╕╡р╣Йр╕Щр╕░р╕Др╕░'
                }
            ]
            client.pushMessage(req.body.line_id, message)
                .then(() => {
                    console.log('push message ctt_good done!')
                })
                .catch((err) => {
                    console.log(err);  
                });
        }
        else if (state == 'ctt_bad') {
            / push message to line */
            const client = new line.Client({
                channelAccessToken: 'SCtu4U76N1oEXS3Ahq1EX9nBNkrtbKGdn8so1vbUZaBIXfTlxGqMldJ3Ego3GscxKGUB7MlfR3DHtTbg6hrYPGU9reSTBcCSiChuKmDCMx4FTtIPXzivaYUi3I6Yk1u/yF5k85Le0IUFrkBNxaETxFGUYhWQfeY8sLGRXgo3xvw='
            });
            const message = [
                {
                    type: 'text',
                    text: 'тЪа р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕лр╕бр╕Фр╣Ар╕зр╕ер╕▓р╕Бр╕▓р╕гр╕Щр╕▒р╕Ър╕ер╕╣р╕Бр╕Фр╕┤р╣Йр╕Щр╣Бр╕ер╣Йр╕з р╣Бр╕Хр╣Ир╕ер╕╣р╕Бр╕Щр╣Йр╕нр╕вр╕вр╕▒р╕Зр╕Фр╕┤р╣Йр╕Щр╣Др╕бр╣Ир╕Цр╕╢р╕З 10 р╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕ер╕в тЦ╢ р╕Лр╕╢р╣Ир╕Зр╕Цр╕╖р╕нр╣Ар╕Ыр╣Зр╕Щр╕кр╕▒р╕Нр╕Нр╕▓р╕Ур╕Чр╕╡р╣Ир╕Ър╣Ир╕Зр╕Ър╕нр╕Бр╕зр╣Ир╕▓р╕ер╕╣р╕Бр╕Щр╣Йр╕нр╕вр╕бр╕╡р╕ар╕▓р╕зр╕░р╕кр╕╕р╕Вр╕ар╕▓р╕Юр╣Др╕бр╣Ир╕Фр╕╡ '
                }, {
                    type: 'text',
                    text: 'тЭЧ р╕Др╕╕р╕Ур╣Бр╕бр╣Ир╕Др╕зр╕гр╕гр╕╡р╕Ър╣Др╕Ыр╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╣Вр╕Фр╕вр╣Ар╕гр╣Зр╕зр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕Юр╕Чр╕вр╣Мр╕Хр╕гр╕зр╕Ир╣Ар╕Кр╣Зр╕Др╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Вр╕нр╕Зр╕ер╕╣р╕Бр╕Щр╣Йр╕нр╕вр╣Гр╕Щр╕Др╕гр╕гр╕ар╣М р╕лр╕гр╕╖р╕нр╣Вр╕Чр╕г 1669 тЭЧ'
                },
            ]
            client.pushMessage(req.body.line_id, message)
                .then(() => {
                    console.log('push message ctt_bad done!')
                })
                .catch((err) => {
                    console.log(err); 
                });
        }
    }

});

module.exports = router;
